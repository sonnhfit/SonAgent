from abc import abstractmethod
from sonagent.nerve_system.brain_lobe import BrainLobe
from sonagent.nerve_system.stimulus import Stimulus
import sonagent.nerve_system.language_area.prompt.me as me_prompt
import sonagent.nerve_system.language_area.prompt.schedule as schedule_prompt
import sonagent.nerve_system.language_area.prompt.planning as planning_prompt
import sonagent.nerve_system.language_area.prompt.coding as coding_prompts
from sonagent.nerve_system.language_area.coding import SonCodeAgent


class LLMBrain(BrainLobe):
    def __init__(self):
        super().__init__()

    @abstractmethod
    def infer(
        self, prompt, system_prompt=None, model="gpt-3.5-turbo", custom_functions=None
    ):
        raise NotImplementedError

    @abstractmethod
    def chat_infer(self, messages, model="gpt-3.5-turbo", custom_functions=None):
        raise NotImplementedError

    def process(self, stimulus, **kwargs):
        if stimulus == Stimulus.ASKING:
            # get prompt from kwargs
            prompt = me_prompt.ASK_ABOUT_ME_PROMPT.format(
                believe=kwargs.get("believe", ""),
                question=kwargs.get("question", ""),
            )
            result = self.infer(prompt)
        elif stimulus == Stimulus.SCHEDULING:
            prompt = schedule_prompt.AUTO_SCHEDULE_PROMPT.format(
                goal=kwargs.get("goal", ""),
            )
            system_prompt = schedule_prompt.SYSTEM_PROMPT
            result = self.infer(prompt, system_prompt)
        elif stimulus == Stimulus.PLANNING:
            prompt = planning_prompt.PROMPT_PLAN.format(
                believe=kwargs.get("believe", ""),
                goal=kwargs.get("goal", ""),
                available_functions=kwargs.get("available_functions", ""),
            )
            result = self.infer(prompt)
        elif stimulus == Stimulus.CLEAN_BELIEF:
            prompt = planning_prompt.CLEAN_BELIEF_PROMPT.format(
                goal=kwargs.get("goal", ""),
                believe=kwargs.get("believe", ""),
            )
            result = self.infer(prompt)
        elif stimulus == Stimulus.CODING:
            git_manager = kwargs.get("git_manager")
            user_data_dir = kwargs.get("user_data_dir")
            summary_plan_or_requirement = kwargs.get("summary_plan_or_requirement")

            codeagent = SonCodeAgent(
                git_manager=git_manager, user_data_dir=user_data_dir, llmbrain=self
            )

            codeagent.gen_code(
                message=summary_plan_or_requirement, is_create_pull_request=True
            )

            result = "Code generated by LLMBrain"
        elif stimulus == Stimulus.REWRITE_CODE:
            code = kwargs.get("code")
            prompt = coding_prompts.REWRITE_CODE_ADD_DOCSTRING_TO_CLASS.format(
                code=code
            )
            sys_prompt = coding_prompts.REWIRTE_CODE_ADD_DOCS_SYSTEM_PROMPT
            result = self.infer(prompt, sys_prompt)     
        elif stimulus == Stimulus.CREATE_SKILL_DOCS:
            code = kwargs.get("code")
            prompt = coding_prompts.AUTO_SKILL_DOCS_PROMPT.format(code=code)
            sys_prompt = coding_prompts.AUTO_SKILL_DOCS_SYSTEM_PROMPT
            result = self.infer(prompt, sys_prompt)
        elif stimulus == Stimulus.WRITE_GITHUB_METADATA:
            summary_text = kwargs.get("summary_text")
            prompt = coding_prompts.GITHUB_PULL_REQUEST_PROMPT.format(
                summary_text=summary_text
            )
            sys_prompt = coding_prompts.GITHUB_PULL_REQUEST_SYSTEM_PROMPT
            result = self.infer(prompt, sys_prompt)
        elif stimulus == Stimulus.CHAT_CODE:
            messages = kwargs.get("messages")
            result = self.chat_infer(
                messages, custom_functions=kwargs.get("custom_functions")
            )
        elif stimulus == Stimulus.SUMMARIZING:
            pass

        return result

    def planning(self, stimulus):
        return stimulus + " planned by LLMBrain"

    def summarize(self, stimulus):
        return stimulus + " summarized by LLMBrain"
